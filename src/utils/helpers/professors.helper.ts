import { PrismaClient, Professor as ProfessorWithId } from "@prisma/client";
import { Response } from "express";

/**
 *Professor object generated by the Prisma client without the id (which is auto *generated)
 */
type Professor = Omit<ProfessorWithId, "id">;

// Prisma client for interaction with our database
const prisma = new PrismaClient();

// Get a professor from the database (with specified id)
export const getProfessor = async (professorId: number, res: Response) => {
   try {
      // Find professor object in database
      const professor = await prisma.professor.findOne({
         where: {
            id: professorId,
         },
      });

      // If found (not null), return it to user.
      if (professor) {
         res.status(200).json({ professor });
      } else {
         // If the professor can't be found, send an error
         res.status(404).json({
            message: `Professor with id ${professorId} not found.`,
         });
      }
   } catch (e) {
      // Some internal database error happened
      res.status(500).json({ message: e.message });
   }
};

// Create a professor object in the database (validated before using)
export const createProfessor = async (professor: Professor, res: Response) => {
   try {
      // Search for previous signups
      const prevSignup = await prisma.professor.findOne({
         where: {
            email: professor.email,
         },
      });

      // Duplicate emails are not allowed
      if (prevSignup) {
         return res.status(400).json({
            message:
               "Duplicate email submitted. Only one account allowed per email",
         });
      }

      // Create a new professor entry and return it to user
      const { first_name, last_name, email, password } = professor;
      const newProfessor = await prisma.professor.create({
         data: {
            first_name,
            last_name,
            email,
            password,
         },
      });

      delete newProfessor.password;
      res.status(201).json({
         message: "Professor account created",
         data: newProfessor,
      });
   } catch (e) {
      // Some internal database error happened
      res.status(500).json({ message: e.message });
   }
};
