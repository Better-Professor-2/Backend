import { PrismaClient, Professor as ProfessorWithId } from "@prisma/client";
import { body, param, validationResult } from "express-validator";
import { Request, Response } from "express";

/**
 *Professor object generated by the Prisma client without the id (which is auto *generated)
 */
type Professor = Omit<ProfessorWithId, "id">;

// Prisma client for interaction with our database
const prisma = new PrismaClient();

// Get a professor from the database (with specified id)
export const getProfessor = async (id: number, res: Response) => {
   try {
      // Find professor object in database
      const professor = await prisma.professor.findOne({
         where: {
            id,
         },
      });

      // If found (not null), return it to user.
      if (professor) {
         res.status(200).json({ message: "New professor created.", professor });
      } else {
         // If the professor can't be found, send an error
         res.status(404).json({
            message: `Professor with id ${id} not found.`,
         });
      }
   } catch (e) {
      // Some internal database error happened
      res.status(500).json({ message: e.message });
   }
};

// Create a professor object in the database (validated before using)
export const createProfessor = async (professor: Professor, res: Response) => {
   try {
      const newProfessor = await prisma.professor.create({
         data: professor,
      });
      res.status(201).json(newProfessor);
   } catch (e) {
      throw new Error("Database error while creating new professor input.");
   }
};

// Used to validate HTTP requests made by the user to the server
export const validate = (method: string) => {
   switch (method) {
      // Used for creating a professor object in DB (POST)
      case "createProfessor": {
         return [
            body("first_name", "Should be a string")
               .isString()
               .withMessage("Should be a string"),
            body("last_name", "Should be a string").isString(),
            body("email", "Should be a valid email").isEmail().normalizeEmail(),
            body("password", "Should be a valid password").isString(),
         ];
      }
      // Used for fetching a professor with an id (GET)
      case "getProfessor": {
         return [
            param(
               "id",
               "Invalid professor id. Make sure it is included in your request parameter (url)."
            ).isNumeric(),
         ];
      }
   }
};

// Returns the errors from validations specified above
export const validationErrors = (req: Request) => {
   return validationResult(req);
};
